# /ErrrorBot/app/utils.py

import re
import html

def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ HTML —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç—Ä–æ–∫–µ."""
    if not isinstance(text, str):
        text = str(text)
    return html.escape(text)

def format_ai_response_to_html(text: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—Ç–≤–µ—Ç –ò–ò –∏–∑ Markdown –≤ HTML –¥–ª—è Telegram.
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    if not text:
        return ""
    
    # –ë–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞
    text = text.strip()
    
    # –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'\\(.)', r'\1', text)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = re.sub(r'^#{1,6}\s+(.+)$', r'<b>\1</b>', text, flags=re.MULTILINE)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ –≤ –∫–æ–¥ (–¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–ª–∞–π–Ω –∫–æ–¥–∞)
    text = re.sub(r'```(?:\w+\n)?([\s\S]*?)```', r'<code>\1</code>', text)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç (**text** –∏–ª–∏ __text__)
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
    text = re.sub(r'__(.*?)__', r'<b>\1</b>', text)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫—É—Ä—Å–∏–≤ (*text* –∏–ª–∏ _text_) - —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'(?<!\*)\*([^*]+?)\*(?!\*)', r'<i>\1</i>', text)
    text = re.sub(r'(?<!_)_([^_]+?)_(?!_)', r'<i>\1</i>', text)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–æ–¥ (`text`)
    text = re.sub(r'`([^`]+?)`', r'<code>\1</code>', text)
    
    # –û—á–∏—Å—Ç–∫–∞ –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
    text = re.sub(r'\n\s*\n\s*\n+', '\n\n', text)
    
    return text.strip()

def split_long_message(text: str, max_length: int = 4096) -> list:
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, —Å–æ—Ö—Ä–∞–Ω—è—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
    –°—Ç–∞—Ä–∞–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª—è—Ç—å –ø–æ –ª–æ–≥–∏—á–µ—Å–∫–∏–º –≥—Ä–∞–Ω–∏—Ü–∞–º (–ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
    """
    if len(text) <= max_length:
        return [text]
    
    # –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
    parts = []
    current_part = ""
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º (–¥–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã)
    paragraphs = text.split('\n\n')
    
    for paragraph in paragraphs:
        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–±–∑–∞—Ü–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
        if len(current_part + '\n\n' + paragraph) <= max_length:
            if current_part:
                current_part += '\n\n' + paragraph
            else:
                current_part = paragraph
        else:
            # –ï—Å–ª–∏ current_part –Ω–µ –ø—É—Å—Ç–æ–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            if current_part:
                parts.append(current_part)
                current_part = ""
            
            # –ï—Å–ª–∏ —Å–∞–º –∞–±–∑–∞—Ü —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–¥–µ–ª—è–µ–º –µ–≥–æ
            if len(paragraph) > max_length:
                # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                sentences = re.split(r'(?<=[.!?])\s+', paragraph)
                
                for sentence in sentences:
                    # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
                    if len(current_part + ' ' + sentence) <= max_length:
                        if current_part:
                            current_part += ' ' + sentence
                        else:
                            current_part = sentence
                    else:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é —á–∞—Å—Ç—å
                        if current_part:
                            parts.append(current_part)
                            current_part = ""
                        
                        # –ï—Å–ª–∏ —Å–∞–º–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–¥–µ–ª—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                        if len(sentence) > max_length:
                            words = sentence.split()
                            for word in words:
                                if len(current_part + ' ' + word) <= max_length:
                                    if current_part:
                                        current_part += ' ' + word
                                    else:
                                        current_part = word
                                else:
                                    if current_part:
                                        parts.append(current_part)
                                        current_part = word
                                    else:
                                        # –ï—Å–ª–∏ —Å–ª–æ–≤–æ —Å–∞–º–æ –ø–æ —Å–µ–±–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                                        parts.append(word[:max_length-3] + "...")
                        else:
                            current_part = sentence
            else:
                current_part = paragraph
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if current_part:
        parts.append(current_part)
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–∏ –æ–¥–Ω–∞ —á–∞—Å—Ç—å –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
    final_parts = []
    for part in parts:
        if len(part) <= max_length:
            final_parts.append(part)
        else:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π
            while len(part) > max_length:
                split_point = max_length - 3
                final_parts.append(part[:split_point] + "...")
                part = "..." + part[split_point:]
            if part:
                final_parts.append(part)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —á–∞—Å—Ç–µ–π, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–æ
    if len(final_parts) > 1:
        for i in range(len(final_parts)):
            final_parts[i] = f"<i>[–ß–∞—Å—Ç—å {i+1}/{len(final_parts)}]</i>\n\n" + final_parts[i]
    
    return final_parts

def format_final_message_html(user_name: str, query: str, ai_response: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ü–∏—Ç–∞—Ç—ã –∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò.
    """
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
    safe_user_name = escape_html(user_name)
    safe_query = escape_html(query)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ò–ò
    formatted_ai_response = format_ai_response_to_html(ai_response)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    final_message = (
        f"<blockquote>{safe_user_name}: {safe_query}</blockquote>\n\n"
        f"<b>üí¨ {formatted_ai_response}</b>"
    )
    
    return final_message