# /ErrrorBot/app/services/g4f_api.py

import asyncio
import logging
import re
import time
import random

try:
    from g4f.client import Client
    from g4f import ChatCompletion, Provider
    import g4f
    G4F_AVAILABLE = True
except ImportError:
    G4F_AVAILABLE = False

from config import settings
from app.services.gdpval_intelligence import gdpval_intelligence
from app.services.llava_intelligence import llava_intelligence

class G4FAPI:
    def __init__(self):
        self.max_tokens = settings.max_tokens
        self.client = Client() if G4F_AVAILABLE else None

    def _clean_response(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
        if not text:
            return ""
        text = text.strip()
        text = re.sub(r'<think>.*?</think>', '', text, flags=re.DOTALL)
        text = re.sub(r'\[thinking\].*?\[/thinking\]', '', text, flags=re.DOTALL)
        text = re.sub(r'\n\n+', '\n\n', text)
        return text.strip()

    async def generate_text(self, prompt: str, system_prompt: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π GDPval –∏ LLaVA –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"""
        
        if not G4F_AVAILABLE:
            return "‚ùå G4F –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # üéØ –£–õ–£–ß–®–ï–ù–ò–ï –ò–ù–¢–ï–õ–õ–ï–ö–¢–ê: –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ GDPval
        enhanced_prompt, enhanced_system_prompt = gdpval_intelligence.enhance_user_prompt(prompt, system_prompt)
        
        # üñºÔ∏è –ú–£–õ–¨–¢–ò–ú–û–î–ê–õ–¨–ù–û–°–¢–¨: –î–æ–±–∞–≤–ª—è–µ–º LLaVA –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        if llava_intelligence.detect_visual_content(enhanced_prompt):
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ LLaVA —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            await llava_intelligence.ensure_initialization()
            
            visual_prompt, visual_system = await llava_intelligence.enhance_visual_prompt(enhanced_prompt)
            enhanced_prompt = visual_prompt
            if visual_system and enhanced_system_prompt:
                enhanced_system_prompt = enhanced_system_prompt + "\n\n" + visual_system
            elif visual_system:
                enhanced_system_prompt = visual_system
        
        messages = []
        if enhanced_system_prompt:
            messages.append({"role": "system", "content": enhanced_system_prompt})
        messages.append({"role": "user", "content": enhanced_prompt})

        # –¢–û–õ–¨–ö–û –†–ê–ë–û–ß–ò–ï –ü–†–û–í–ê–ô–î–ï–†–´ (–∏–∑ –≤–∞—à–µ–≥–æ –ª–æ–≥–∞)
        strategies = [
            # DeepSeek —á–µ—Ä–µ–∑ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
            lambda: ChatCompletion.create(model="deepseek-v3", messages=messages, provider=g4f.Provider.Together),
            lambda: ChatCompletion.create(model="deepseek-v3", messages=messages, provider=g4f.Provider.PollinationsAI),
            lambda: ChatCompletion.create(model="deepseek-v3", messages=messages),
            
            # Blackbox - —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π
            lambda: ChatCompletion.create(model="blackboxai", messages=messages, provider=g4f.Provider.Blackbox),
            lambda: ChatCompletion.create(model="gpt-4o-mini", messages=messages, provider=g4f.Provider.Blackbox),
            lambda: ChatCompletion.create(model="gpt-4o", messages=messages, provider=g4f.Provider.Blackbox),
            lambda: ChatCompletion.create(model="gpt-4", messages=messages, provider=g4f.Provider.Blackbox),
            
            # Together - —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
            lambda: ChatCompletion.create(model="llama-3.3-70b", messages=messages, provider=g4f.Provider.Together),
            lambda: ChatCompletion.create(model="qwen-2.5-72b", messages=messages, provider=g4f.Provider.Together),
            lambda: ChatCompletion.create(model="mixtral-8x7b", messages=messages, provider=g4f.Provider.Together),
            lambda: ChatCompletion.create(model="deepseek-r1", messages=messages, provider=g4f.Provider.Together),
            
            # PollinationsAI - —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∫–ª—é—á–µ–π
            lambda: ChatCompletion.create(model="gpt-4o-mini", messages=messages, provider=g4f.Provider.PollinationsAI),
            lambda: ChatCompletion.create(model="gpt-4o", messages=messages, provider=g4f.Provider.PollinationsAI),
            lambda: ChatCompletion.create(model="llama-3.3-70b", messages=messages, provider=g4f.Provider.PollinationsAI),
            lambda: ChatCompletion.create(model="qwq-32b", messages=messages, provider=g4f.Provider.PollinationsAI),
            
            # HuggingSpace - –∏–Ω–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
            lambda: ChatCompletion.create(model="qwen-2-72b", messages=messages, provider=g4f.Provider.HuggingSpace),
            lambda: ChatCompletion.create(model="command-r-plus", messages=messages, provider=g4f.Provider.HuggingSpace),
            
            # Websim - —Å—Ç–∞–±–∏–ª—å–Ω—ã–π
            lambda: ChatCompletion.create(model="gemini-1.5-pro", messages=messages, provider=g4f.Provider.Websim),
            lambda: ChatCompletion.create(model="gemini-1.5-flash", messages=messages, provider=g4f.Provider.Websim),
            
            # Copilot - MS –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            lambda: ChatCompletion.create(model="gpt-4", messages=messages, provider=g4f.Provider.Copilot),
            
            # –ê–≤—Ç–æ–≤—ã–±–æ—Ä - —á–∞—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
            lambda: ChatCompletion.create(model="deepseek-v3", messages=messages),
            lambda: ChatCompletion.create(model="gpt-4o", messages=messages),
            lambda: ChatCompletion.create(model="gpt-4o-mini", messages=messages),
            lambda: ChatCompletion.create(model="claude-3.5-sonnet", messages=messages),
            lambda: ChatCompletion.create(model="gemini-1.5-flash", messages=messages),
            lambda: ChatCompletion.create(model="llama-3.3-70b", messages=messages)
        ]
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        random.shuffle(strategies)
        
        print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è: {prompt[:30]}...")
        
        for i, strategy in enumerate(strategies, 1):
            try:
                print(f"–ü–æ–ø—ã—Ç–∫–∞ {i}: ", end="", flush=True)
                
                response = await asyncio.wait_for(
                    asyncio.to_thread(strategy),
                    timeout=15.0
                )
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
                response_text = ""
                if hasattr(response, 'choices') and response.choices:
                    response_text = response.choices[0].message.content
                elif hasattr(response, 'content'):
                    response_text = response.content
                elif isinstance(response, str):
                    response_text = response
                else:
                    response_text = str(response)
                
                if response_text and len(response_text.strip()) > 5:
                    cleaned = self._clean_response(response_text)
                    
                    # üéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ò–ù–¢–ï–õ–õ–ï–ö–¢: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
                    smart_enhancement = gdpval_intelligence.get_smart_response_enhancement(prompt)
                    if smart_enhancement and len(cleaned) < 1000:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫ –∫–æ—Ä–æ—Ç–∫–∏–º –æ—Ç–≤–µ—Ç–∞–º
                        cleaned += smart_enhancement
                    
                    # üñºÔ∏è –í–ò–ó–£–ê–õ–¨–ù–ê–Ø –≠–ö–°–ü–ï–†–¢–ò–ó–ê: –î–æ–±–∞–≤–ª—è–µ–º LLaVA-–ø–æ–¥–æ–±–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    visual_enhancement = await llava_intelligence.get_visual_response_enhancement(prompt)
                    if visual_enhancement and len(cleaned) < 1200:  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
                        cleaned += visual_enhancement
                    
                    print(f"‚úÖ –£—Å–ø–µ—Ö! –î–ª–∏–Ω–∞: {len(cleaned)}")
                    return cleaned
                else:
                    print("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                        
            except Exception as e:
                error = str(e)[:40]
                print(f"‚ùå {error}")
                continue
        
        return "‚ùå –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

    async def test_speed(self):
        """–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        print("\n‚ö° –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
        
        messages = [{"role": "user", "content": "Hello"}]
        
        tests = [
            ("DeepSeek V3 (Together)", lambda: ChatCompletion.create(model="deepseek-v3", messages=messages, provider=g4f.Provider.Together)),
            ("DeepSeek V3 (Auto)", lambda: ChatCompletion.create(model="deepseek-v3", messages=messages)),
            ("Blackbox AI", lambda: ChatCompletion.create(model="blackboxai", messages=messages, provider=g4f.Provider.Blackbox)),
            ("GPT-4o (Blackbox)", lambda: ChatCompletion.create(model="gpt-4o", messages=messages, provider=g4f.Provider.Blackbox)),
            ("Llama-3.3-70b (Together)", lambda: ChatCompletion.create(model="llama-3.3-70b", messages=messages, provider=g4f.Provider.Together))
        ]
        
        for name, method in tests:
            try:
                start_time = time.time()
                response = await asyncio.wait_for(asyncio.to_thread(method), timeout=15.0)
                
                response_text = ""
                if hasattr(response, 'choices') and response.choices:
                    response_text = response.choices[0].message.content
                elif isinstance(response, str):
                    response_text = response
                elif hasattr(response, 'content'):
                    response_text = response.content
                
                if response_text and len(response_text.strip()) > 0:
                    elapsed = time.time() - start_time
                    print(f"‚úÖ {name}: {elapsed:.1f}s")
                else:
                    print(f"‚ùå {name}: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                    
            except Exception as e:
                print(f"‚ùå {name}: {str(e)[:30]}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
g4f_api_service = G4FAPI()