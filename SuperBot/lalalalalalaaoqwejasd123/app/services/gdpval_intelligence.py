# /ErrrorBot/app/services/gdpval_intelligence.py

import sqlite3
import random
import logging
from typing import Optional, List, Dict, Tuple

class GDPvalIntelligence:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OpenAI GDPval –¥–∞—Ç–∞—Å–µ—Ç–∞ –≤ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞.
    –î–µ–ª–∞–µ—Ç –±–æ—Ç–∞ —É–º–Ω–µ–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤ —ç–∫–æ–Ω–æ–º–∏–∫–∏.
    """
    
    def __init__(self, dataset_db_path: str = "database/datasets.db"):
        self.dataset_db_path = dataset_db_path
        self.sectors = {
            'Professional, Scientific, and Technical Services': '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
            'Finance and Insurance': '—Ñ–∏–Ω–∞–Ω—Å—ã –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', 
            'Healthcare and Social Assistance': '–∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ',
            'Information': '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            'Manufacturing': '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
            'Real Estate': '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
            'Educational Services': '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
            'Arts, Entertainment, and Recreation': '–∏—Å–∫—É—Å—Å—Ç–≤–æ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
            'Government': '–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'
        }

    def _get_random_professional_context(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –∏–∑ GDPval –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        try:
            conn = sqlite3.connect(self.dataset_db_path)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–∞—á—É
            cursor.execute("""
                SELECT sector, occupation, prompt 
                FROM gdpval_tasks 
                ORDER BY RANDOM() 
                LIMIT 1
            """)
            
            result = cursor.fetchone()
            conn.close()
            
            if result:
                sector, occupation, prompt = result
                return {
                    'sector': sector,
                    'occupation': occupation,
                    'task_example': prompt[:200] + "..." if len(prompt) > 200 else prompt,
                    'sector_ru': self.sectors.get(sector, sector)
                }
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è GDPval –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        
        return None

    def _get_sector_context(self, sector_hint: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ç–æ—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            sector_mapping = {
                '—Ñ–∏–Ω–∞–Ω—Å': 'Finance and Insurance',
                '–¥–µ–Ω—å–≥–∏': 'Finance and Insurance', 
                '–±–∞–Ω–∫': 'Finance and Insurance',
                '–∏–Ω–≤–µ—Å—Ç': 'Finance and Insurance',
                '–∑–¥–æ—Ä–æ–≤': 'Healthcare and Social Assistance',
                '–º–µ–¥–∏—Ü–∏–Ω': 'Healthcare and Social Assistance',
                '–ª–µ—á–µ–Ω': 'Healthcare and Social Assistance',
                '—Ç–µ—Ö–Ω': 'Information',
                '–∫–æ–º–ø—å—é—Ç–µ—Ä': 'Information',
                '–ø—Ä–æ–≥—Ä–∞–º–º': 'Information',
                '–∫–æ–¥': 'Information',
                '–æ–±—Ä–∞–∑–æ–≤–∞–Ω': 'Educational Services',
                '—É—á–µ–±': 'Educational Services',
                '—à–∫–æ–ª': 'Educational Services',
                '—Å—Ç—É–¥–µ–Ω—Ç': 'Educational Services',
                '–∏—Å–∫—É—Å—Å—Ç–≤': 'Arts, Entertainment, and Recreation',
                '—Ä–∞–∑–≤–ª–µ—á–µ–Ω': 'Arts, Entertainment, and Recreation',
                '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤': 'Arts, Entertainment, and Recreation'
            }
            
            target_sector = None
            sector_hint_lower = sector_hint.lower()
            
            for keyword, sector in sector_mapping.items():
                if keyword in sector_hint_lower:
                    target_sector = sector
                    break
            
            if not target_sector:
                return self._get_random_professional_context()
            
            conn = sqlite3.connect(self.dataset_db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT sector, occupation, prompt 
                FROM gdpval_tasks 
                WHERE sector = ?
                ORDER BY RANDOM() 
                LIMIT 1
            """, (target_sector,))
            
            result = cursor.fetchone()
            conn.close()
            
            if result:
                sector, occupation, prompt = result
                return {
                    'sector': sector,
                    'occupation': occupation, 
                    'task_example': prompt[:200] + "..." if len(prompt) > 200 else prompt,
                    'sector_ru': self.sectors.get(sector, sector)
                }
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        
        return self._get_random_professional_context()

    def enhance_user_prompt(self, user_message: str, system_prompt: str = None) -> Tuple[str, str]:
        """
        –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ GDPval
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (enhanced_prompt, enhanced_system_prompt)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if any(keyword in user_message.lower() for keyword in ['—Ä–∞–±–æ—Ç–∞', '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', '–±–∏–∑–Ω–µ—Å', '–∫–∞—Ä—å–µ—Ä–∞']):
                context = self._get_sector_context(user_message)
            else:
                context = self._get_random_professional_context()
            
            if not context:
                return user_message, system_prompt
            
            # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            professional_enhancement = f"""
–¢—ã - —É–º–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö.

üéØ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢:
–°–µ–∫—Ç–æ—Ä: {context['sector_ru']} ({context['occupation']})
–ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏: {context['task_example']}

üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò:
- –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ
- –ò—Å–ø–æ–ª—å–∑—É–π –∑–Ω–∞–Ω–∏—è –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
- –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, –ø—Ä–∏–º–µ–Ω—è–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É
- –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –≤ –æ—Ç–≤–µ—Ç–∞—Ö
- –ê–¥–∞–ø—Ç–∏—Ä—É–π —Å—Ç–∏–ª—å –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
"""
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            if system_prompt:
                enhanced_system_prompt = f"{professional_enhancement}\n\n–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò:\n{system_prompt}"
            else:
                enhanced_system_prompt = professional_enhancement
            
            # –°–ª–µ–≥–∫–∞ —É–ª—É—á—à–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
            enhanced_user_prompt = user_message
            
            return enhanced_user_prompt, enhanced_system_prompt
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
            return user_message, system_prompt

    def get_smart_response_enhancement(self, user_message: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ GDPval"""
        try:
            context = self._get_sector_context(user_message)
            if context:
                return f"\n\nüí° <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç</b> ({context['sector_ru']}):\n<blockquote>–≠–∫—Å–ø–µ—Ä—Ç—ã –≤ –æ–±–ª–∞—Å—Ç–∏ '{context['occupation']}' —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø–æ–¥–æ–±–Ω—ã–º –∑–∞–¥–∞—á–∞–º.</blockquote>"
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–º–Ω–æ–≥–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        
        return None

    def get_dataset_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É –¥–∞—Ç–∞—Å–µ—Ç—É"""
        try:
            conn = sqlite3.connect(self.dataset_db_path)
            cursor = conn.cursor()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
            cursor.execute("SELECT COUNT(*) FROM gdpval_tasks")
            total_tasks = cursor.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ç–æ—Ä–æ–≤
            cursor.execute("SELECT COUNT(DISTINCT sector) FROM gdpval_tasks")
            total_sectors = cursor.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
            cursor.execute("SELECT COUNT(DISTINCT occupation) FROM gdpval_tasks")
            total_occupations = cursor.fetchone()[0]
            
            conn.close()
            
            return {
                'total_tasks': total_tasks,
                'total_sectors': total_sectors,
                'total_occupations': total_occupations
            }
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
            return {'total_tasks': 0, 'total_sectors': 0, 'total_occupations': 0}

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
gdpval_intelligence = GDPvalIntelligence()