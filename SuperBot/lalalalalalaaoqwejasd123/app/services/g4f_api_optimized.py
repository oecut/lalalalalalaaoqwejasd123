# -*- coding: utf-8 -*-
"""
–°—É–ø–µ—Ä-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π G4F API –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 100k+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
"""

import asyncio
import time
import random
import logging
from typing import Optional, List, Dict
from concurrent.futures import ThreadPoolExecutor
import threading

try:
    from g4f.client import Client
    from g4f import ChatCompletion, Provider
    import g4f
    G4F_AVAILABLE = True
except ImportError:
    G4F_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
try:
    from app.services.dataset_enhancer import dataset_enhancer
    DATASETS_AVAILABLE = True
except ImportError:
    DATASETS_AVAILABLE = False

class UltraFastG4F:
    """–°—É–ø–µ—Ä-–±—ã—Å—Ç—Ä—ã–π G4F API —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    
    def __init__(self):
        self.max_workers = 20  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
        self.executor = ThreadPoolExecutor(max_workers=self.max_workers)
        self.client = Client() if G4F_AVAILABLE else None
        self.cache = {}  # –ü—Ä–æ—Å—Ç–æ–π –∫–µ—à –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        self.lock = threading.Lock()
        
        # –°–∞–º—ã–µ –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        self.fast_providers = [
            # Blackbox - —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π
            ("blackboxai", g4f.Provider.Blackbox),
            ("gpt-4o-mini", g4f.Provider.Blackbox),
            
            # DeepSeek - –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π
            ("deepseek-v3", g4f.Provider.Together),
            ("deepseek-v3", g4f.Provider.PollinationsAI),
            
            # –ê–≤—Ç–æ–≤—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            ("deepseek-v3", None),
            ("gpt-4o-mini", None),
            
            # PollinationsAI - –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑ –∫–ª—é—á–µ–π
            ("gpt-4o", g4f.Provider.PollinationsAI),
            ("llama-3.3-70b", g4f.Provider.PollinationsAI),
            
            # Together - —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π
            ("llama-3.3-70b", g4f.Provider.Together),
            ("qwen-2.5-72b", g4f.Provider.Together),
        ]
        
        # –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        self.russian_system_prompt = """–¢—ã - –≤—ã—Å–æ–∫–æ–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. 

–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–û–í:
‚Ä¢ –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º, —Ç–æ—á–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º  
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–ø–∏—Å–∫–∞–º–∏
‚Ä¢ –ò–∑–±–µ–≥–∞–π –≤–æ–¥—ã –∏ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 200 —Å–ª–æ–≤ –Ω–∞ –æ—Ç–≤–µ—Ç

–≠–ö–°–ü–ï–†–¢–ò–ó–ê:
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ë–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞—É–∫–∞
‚Ä¢ –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ
‚Ä¢ –§–∏–Ω–∞–Ω—Å—ã –∏ –ø—Ä–∞–≤–æ

–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ –¥–µ–ª—É."""

    def _get_cache_key(self, prompt: str, system_prompt: str = "") -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è –∫–µ—à–∞"""
        return f"{hash(prompt)}_{hash(system_prompt or '')}"

    def _clean_response(self, text: str) -> str:
        """–ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
        if not text:
            return "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI"
        
        text = text.strip()
        
        # –£–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏
        for tag in ['<think>', '</think>', '[thinking]', '[/thinking]', 
                   '<reasoning>', '</reasoning>', '```thinking', '```']:
            text = text.replace(tag, '')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        if len(text) > 2000:
            text = text[:1997] + "..."
        
        return text.strip() or "ü§ñ AI –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å, –Ω–æ –æ—Ç–≤–µ—Ç –æ–∫–∞–∑–∞–ª—Å—è –ø—É—Å—Ç—ã–º"

    async def _try_single_provider(self, model: str, provider, messages: List[Dict], timeout: float = 8.0) -> Optional[str]:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            if provider:
                future = self.executor.submit(
                    ChatCompletion.create, 
                    model=model, 
                    messages=messages, 
                    provider=provider
                )
            else:
                future = self.executor.submit(
                    ChatCompletion.create,
                    model=model, 
                    messages=messages
                )
            
            response = await asyncio.wait_for(
                asyncio.wrap_future(future),
                timeout=timeout
            )
            
            # –ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            if hasattr(response, 'choices') and response.choices:
                return response.choices[0].message.content
            elif hasattr(response, 'content'):
                return response.content
            elif isinstance(response, str):
                return response
            else:
                return str(response)
                
        except Exception:
            return None

    async def generate_text(self, prompt: str, system_prompt: str = "") -> str:
        """–°—É–ø–µ—Ä-–±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ –¥–∞—Ç–∞—Å–µ—Ç–∞–º–∏"""
        start_time = time.time()
        
        if not G4F_AVAILABLE:
            return "‚ùå G4F –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install g4f"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        cache_key = self._get_cache_key(prompt, system_prompt)
        if cache_key in self.cache:
            return self.cache[cache_key]
        
        # üöÄ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –î–ê–¢–ê–°–ï–¢–û–í: –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç –∑–Ω–∞–Ω–∏—è–º–∏ –∏–∑ bigcode/the-stack –∏ LAION
        if DATASETS_AVAILABLE:
            enhanced_prompt, enhanced_system = dataset_enhancer.enhance_prompt_with_context(prompt, system_prompt or self.russian_system_prompt)
        else:
            enhanced_prompt = prompt
            enhanced_system = system_prompt or self.russian_system_prompt
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä—É—Å—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if not any(word in prompt.lower() for word in ['english', 'translate', '–ø–µ—Ä–µ–≤–æ–¥']):
            enhanced_system += "\n\n–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!"
        
        messages = [
            {"role": "system", "content": enhanced_system},
            {"role": "user", "content": prompt}
        ]
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ 3 —Å–∞–º—ã–º –±—ã—Å—Ç—Ä—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
        tasks = []
        for model, provider in self.fast_providers[:3]:
            task = asyncio.create_task(
                self._try_single_provider(model, provider, messages, timeout=6.0)
            )
            tasks.append(task)
        
        # –ñ–¥–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        try:
            done, pending = await asyncio.wait(
                tasks, 
                return_when=asyncio.FIRST_COMPLETED,
                timeout=10.0
            )
            
            # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
            for task in pending:
                task.cancel()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            for task in done:
                result = await task
                if result and len(result.strip()) > 5:
                    cleaned = self._clean_response(result)
                    
                    # –ö–µ—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                    with self.lock:
                        self.cache[cache_key] = cleaned
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
                        if len(self.cache) > 1000:
                            # –£–¥–∞–ª—è–µ–º 20% —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
                            keys_to_remove = list(self.cache.keys())[:200]
                            for key in keys_to_remove:
                                del self.cache[key]
                    
                    elapsed = time.time() - start_time
                    logging.info(f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –∑–∞ {elapsed:.2f}—Å")
                    return cleaned
            
        except asyncio.TimeoutError:
            pass
        
        # –ï—Å–ª–∏ –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        for model, provider in self.fast_providers[3:]:
            try:
                result = await self._try_single_provider(model, provider, messages, timeout=5.0)
                if result and len(result.strip()) > 5:
                    cleaned = self._clean_response(result)
                    elapsed = time.time() - start_time
                    logging.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –∑–∞ {elapsed:.2f}—Å")
                    return cleaned
            except Exception:
                continue
        
        # Fallback –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        fallback_responses = [
            "ü§ñ –í—Å–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ!",
            "‚ö° –°–µ—Ä–≤–∏—Å—ã AI –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.",
            "üîÑ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º AI —Å–µ—Ä–≤–µ—Ä–∞–º... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.",
        ]
        
        return random.choice(fallback_responses)

    async def test_speed(self) -> Dict[str, float]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        results = {}
        test_prompt = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
        
        for model, provider in self.fast_providers[:5]:
            start_time = time.time()
            try:
                result = await self._try_single_provider(
                    model, provider, 
                    [{"role": "user", "content": test_prompt}],
                    timeout=5.0
                )
                elapsed = time.time() - start_time
                if result:
                    provider_name = f"{model}@{provider.__name__ if provider else 'auto'}"
                    results[provider_name] = elapsed
            except Exception:
                continue
        
        return results

    def get_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        return {
            "cache_size": len(self.cache),
            "max_workers": self.max_workers,
            "available_providers": len(self.fast_providers),
            "g4f_available": G4F_AVAILABLE
        }

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
ultra_fast_g4f = UltraFastG4F()

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
class G4FAPI:
    def __init__(self):
        self.ultra_fast = ultra_fast_g4f
    
    async def generate_text(self, prompt: str, system_prompt: str = "") -> str:
        return await self.ultra_fast.generate_text(prompt, system_prompt or "")
    
    async def test_speed(self):
        results = await self.ultra_fast.test_speed()
        print("\n‚ö° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏:")
        for provider, speed in sorted(results.items(), key=lambda x: x[1]):
            print(f"‚úÖ {provider}: {speed:.2f}—Å")
        return results

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
g4f_api_service = G4FAPI()