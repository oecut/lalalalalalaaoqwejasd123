# /ErrrorBot/app/handlers/private_handlers.py

from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.exceptions import TelegramBadRequest, TelegramNetworkError
from aiogram.enums import ParseMode, ChatType
import logging
import asyncio
import html

from app.services.database import db
from app.services.g4f_api import g4f_api_service
from app.utils import format_ai_response_to_html, split_long_message
from config import settings
from messages import Errors

router = Router()

async def send_safe_private_message(bot: Bot, chat_id: int, text: str, 
                                   reply_to_message_id: int = None,
                                   edit_message_id: int = None) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –õ–° —Å HTML-–ø–∞—Ä—Å–∏–Ω–≥–æ–º –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
    message_parts = split_long_message(text)
    
    try:
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        if edit_message_id:
            await bot.edit_message_text(
                text=message_parts[0],
                chat_id=chat_id,
                message_id=edit_message_id,
                parse_mode=ParseMode.HTML
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for part in message_parts[1:]:
                await asyncio.sleep(0.1)
                await bot.send_message(
                    chat_id=chat_id,
                    text=part,
                    parse_mode=ParseMode.HTML
                )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = await bot.send_message(
                chat_id=chat_id,
                text=message_parts[0],
                reply_to_message_id=reply_to_message_id,
                parse_mode=ParseMode.HTML
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for part in message_parts[1:]:
                await asyncio.sleep(0.1)
                await bot.send_message(
                    chat_id=chat_id,
                    text=part,
                    parse_mode=ParseMode.HTML
                )
            
            return sent_message.message_id if sent_message else None
            
        return True
        
    except (TelegramBadRequest, TelegramNetworkError) as e:
        error_str = str(e).lower()
        
        if "can't parse entities" in error_str:
            # –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            logging.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML –≤ –õ–°. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º. –û—à–∏–±–∫–∞: {e}")
            try:
                # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –∏–∑ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π
                plain_parts = [html.unescape(part) for part in message_parts]
                for part in plain_parts:
                    part = part.replace('<b>', '').replace('</b>', '')
                    part = part.replace('<i>', '').replace('</i>', '')
                    part = part.replace('<code>', '').replace('</code>', '')
                    part = part.replace('<blockquote>', '').replace('</blockquote>', '')
                
                if edit_message_id:
                    await bot.edit_message_text(
                        text=plain_parts[0],
                        chat_id=chat_id,
                        message_id=edit_message_id,
                        parse_mode=None
                    )
                    for part in plain_parts[1:]:
                        await asyncio.sleep(0.1)
                        await bot.send_message(
                            chat_id=chat_id,
                            text=part,
                            parse_mode=None
                        )
                else:
                    sent_message = await bot.send_message(
                        chat_id=chat_id,
                        text=plain_parts[0],
                        reply_to_message_id=reply_to_message_id,
                        parse_mode=None
                    )
                    for part in plain_parts[1:]:
                        await asyncio.sleep(0.1)
                        await bot.send_message(
                            chat_id=chat_id,
                            text=part,
                            parse_mode=None
                        )
                    return sent_message.message_id if sent_message else None
                return True
            except Exception as inner_e:
                logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ fallback-—Å–æ–æ–±—â–µ–Ω–∏–π –≤ –õ–°: {inner_e}")
                return False
        else:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Telegram –≤ –õ–°: {e}")
            return False
            
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –õ–°: {e}")
        return False

def validate_prompt(prompt: str) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    if not prompt or not prompt.strip():
        return False, "‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ—Å–ª–µ .ai/.–∏–∏"
    
    if len(prompt) > 1000:
        return False, "‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤."
    
    suspicious_patterns = ['system:', 'override:', 'ignore previous', 'new instructions']
    if any(pattern in prompt.lower() for pattern in suspicious_patterns):
        return False, "‚ùå –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω."
    
    return True, ""

async def check_private_limits(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –õ–°"""
    user_id = message.from_user.id
    
    requests_today = await db.get_user_requests_count(user_id)
    if requests_today is None:
        await db.add_or_update_user(
            user_id, 
            message.from_user.username, 
            message.from_user.first_name
        )
        requests_today = 0
        
    if requests_today >= settings.daily_request_limit:
        await send_safe_private_message(
            message.bot, 
            message.chat.id, 
            Errors.daily_limit_reached,
            reply_to_message_id=message.message_id
        )
        return False
    return True

@router.message(F.chat.type == ChatType.PRIVATE)
async def handle_private_message(message: Message, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö (–Ω–µ business).
    –†–∞–±–æ—Ç–∞–µ—Ç –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏—á–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã .ai –∏ .–∏–∏
    """
    if not message.text:
        return
    
    message_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã .ai –∏–ª–∏ .–∏–∏
    if not (message_text.lower().startswith(".ai") or message_text.lower().startswith(".–∏–∏")):
        return
    
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ .ai/.–∏–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –õ–° –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if not await check_private_limits(message):
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if message_text.lower().startswith(".–∏–∏"):
        prompt = message_text[3:].strip()
    else:
        prompt = message_text[3:].strip()
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
    is_valid, error_message = validate_prompt(prompt)
    if not is_valid:
        await send_safe_private_message(
            bot, chat_id, error_message,
            reply_to_message_id=message.message_id
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∂–∏—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    safe_prompt_preview = html.escape(prompt[:50])
    status_text = f'<b>‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "{safe_prompt_preview}..."</b>'
    
    status_message_id = await send_safe_private_message(
        bot, chat_id,
        status_text,
        reply_to_message_id=message.message_id
    )
    
    if not status_message_id:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –õ–°")
        return

    try:
        # –î–ª—è –õ–° –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_style_prompt = await db.get_active_style_prompt(user_id)
        
        logging.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –õ–°, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {prompt[:50]}")
        response = await g4f_api_service.generate_text(
            prompt=prompt, 
            system_prompt=active_style_prompt or ""
        )
        
        if len(response.strip()) < 10:
            response = "–ü–æ–ª—É—á–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        formatted_ai_response = format_ai_response_to_html(response)
        safe_user_name = html.escape(user_name)
        safe_prompt = html.escape(prompt)
        
        final_text = (
            f"<blockquote>{safe_user_name}: {safe_prompt}</blockquote>\n\n"
            f"üí¨ <b>{formatted_ai_response}</b>"
        )
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        success = await send_safe_private_message(
            bot, chat_id, final_text,
            edit_message_id=status_message_id
        )
        
        if success:
            await db.increment_user_requests(user_id, 'text')
            logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω .ai/.–∏–∏ –∑–∞–ø—Ä–æ—Å –≤ –õ–° –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –≤ –õ–°")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_private_message: {e}")
        await send_safe_private_message(
            bot, chat_id,
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>",
            edit_message_id=status_message_id
        )