# /ErrrorBot/app/services/g4f_api.py

import asyncio
import logging
from typing import Optional, Dict, Any
import re
import json
import time

try:
    from g4f.client import Client
    from g4f import ChatCompletion, Provider
    import g4f
    G4F_AVAILABLE = True
except ImportError:
    G4F_AVAILABLE = False
    logging.error("g4f –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install -U g4f")

from config import settings

class G4FAPI:
    def __init__(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å g4f —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∞ –±—ã—Å—Ç—Ä—ã–µ DeepSeek –º–æ–¥–µ–ª–∏ (–°–µ–Ω—Ç—è–±—Ä—å 2025)"""
        self.max_tokens = settings.max_tokens
        self.client = Client() if G4F_AVAILABLE else None
        self.last_request_time = {}
        self.request_delay = 1.5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è DeepSeek
        
        logging.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è G4F API —Å –±—ã—Å—Ç—Ä—ã–º–∏ DeepSeek –º–æ–¥–µ–ª—è–º–∏ (–ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤: {self.max_tokens})")
        
        if not G4F_AVAILABLE:
            logging.error("G4F –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")

    def _clean_response(self, text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò"""
        if not text:
            return ""
            
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = text.strip()
        
        # –£–±–∏—Ä–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã thinking –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–ø–∞–¥—É—Ç)
        text = re.sub(r'<think>.*?</think>', '', text, flags=re.DOTALL)
        text = re.sub(r'\[thinking\].*?\[/thinking\]', '', text, flags=re.DOTALL)
        text = re.sub(r'ÊÄùËÄÉÔºö.*?(?=\n|$)', '', text, flags=re.MULTILINE)
        text = re.sub(r'Let me think.*?(?=\n|$)', '', text, flags=re.MULTILINE)
        
        # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'\n\n+', '\n\n', text)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r' +', ' ', text)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è —Å–∏–º–≤–æ–ª–∞–º–∏ –≤ –∫–æ–Ω—Ü–µ
        text = re.sub(r'(.)\1{2,}$', r'\1', text)
        
        return text.strip()

    async def _rate_limit_check(self, provider_name: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        current_time = time.time()
        last_time = self.last_request_time.get(provider_name, 0)
        
        if current_time - last_time < self.request_delay:
            wait_time = self.request_delay - (current_time - last_time)
            await asyncio.sleep(wait_time)
        
        self.last_request_time[provider_name] = time.time()

    async def generate_text(self, prompt: str, system_prompt: Optional[str] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∞ –ë–´–°–¢–†–´–ï DeepSeek –º–æ–¥–µ–ª–∏ (–°–µ–Ω—Ç—è–±—Ä—å 2025)
        
        –ë—ã—Å—Ç—Ä—ã–µ –º–æ–¥–µ–ª–∏ DeepSeek (–±–µ–∑ reasoning):
        - deepseek-chat (DeepSeek-V3.1-Terminus –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ)
        - deepseek-v3 (–±–∞–∑–æ–≤–∞—è V3 –º–æ–¥–µ–ª—å) 
        - deepseek-coder (—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è –∫–æ–¥–∞)
        """
        
        if not G4F_AVAILABLE or not self.client:
            return "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–¥—É–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = []
        if system_prompt:
            messages.append({"role": "system", "content": system_prompt})
        messages.append({"role": "user", "content": prompt})

        # –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ë–´–°–¢–†–´–ï DeepSeek –º–æ–¥–µ–ª–∏
        strategies = [
            # –í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢: –ë—ã—Å—Ç—Ä—ã–µ DeepSeek –º–æ–¥–µ–ª–∏
            {
                'name': 'DeepSeek Chat (V3.1-Terminus Fast)',
                'method': lambda: self.client.chat.completions.create(
                    model="deepseek-chat",
                    messages=messages,
                    max_tokens=self.max_tokens,
                    temperature=0.7,
                    stream=False
                ),
                'rate_limit': True,
                'timeout': 20.0
            },
            
            {
                'name': 'DeepSeek V3 (Base Fast)',
                'method': lambda: self.client.chat.completions.create(
                    model="deepseek-v3",
                    messages=messages,
                    max_tokens=self.max_tokens,
                    temperature=0.7
                ),
                'rate_limit': True,
                'timeout': 18.0
            },
            
            {
                'name': 'DeepSeek Coder (Fast)',
                'method': lambda: self.client.chat.completions.create(
                    model="deepseek-coder",
                    messages=messages,
                    max_tokens=self.max_tokens
                ),
                'rate_limit': True,
                'timeout': 18.0
            },
            
            # –û–ß–ï–ù–¨ –ë–´–°–¢–†–´–ï FALLBACK –ú–û–î–ï–õ–ò 
            {
                'name': 'Gemini 2.0 Flash (Ultra Fast)',
                'method': lambda: self.client.chat.completions.create(
                    model="gemini-2.0-flash-exp",
                    messages=messages,
                    max_tokens=self.max_tokens,
                    temperature=0.8
                ),
                'rate_limit': False,
                'timeout': 12.0
            },
            
            {
                'name': 'GPT-4o Mini (Ultra Fast)',
                'method': lambda: self.client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=messages,
                    max_tokens=self.max_tokens
                ),
                'rate_limit': False,
                'timeout': 15.0
            },
            
            {
                'name': 'Claude 3.5 Haiku (Ultra Fast)',
                'method': lambda: self.client.chat.completions.create(
                    model="claude-3-5-haiku-20241022",
                    messages=messages,
                    max_tokens=self.max_tokens
                ),
                'rate_limit': False,
                'timeout': 15.0
            },
            
            # –ó–ê–ü–ê–°–ù–´–ï –ë–´–°–¢–†–´–ï –ú–û–î–ï–õ–ò
            {
                'name': 'Llama 3.1 70B (Fast)',
                'method': lambda: self.client.chat.completions.create(
                    model="llama-3.1-70b-instruct",
                    messages=messages,
                    max_tokens=self.max_tokens
                ),
                'rate_limit': False,
                'timeout': 18.0
            },
            
            {
                'name': 'Qwen 2.5 72B (Fast)',
                'method': lambda: self.client.chat.completions.create(
                    model="qwen-2.5-72b-instruct",
                    messages=messages,
                    max_tokens=self.max_tokens
                ),
                'rate_limit': False,
                'timeout': 18.0
            },
            
            # LEGACY –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤
            {
                'name': 'Legacy ChatCompletion Auto',
                'method': lambda: ChatCompletion.create(
                    model="gpt-4",
                    messages=messages,
                    provider=g4f.Provider.Auto
                ),
                'rate_limit': False,
                'timeout': 25.0
            },
            
            {
                'name': 'Legacy You.com (Fast)',
                'method': lambda: ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=messages,
                    provider=g4f.Provider.You
                ),
                'rate_limit': False,
                'timeout': 20.0
            }
        ]
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        logging.info(f"–ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∞ –ë–´–°–¢–†–´–ï DeepSeek –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {prompt[:50]}...")
        
        for i, strategy in enumerate(strategies, 1):
            try:
                logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ {i}/{len(strategies)}: {strategy['name']}")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting –¥–ª—è DeepSeek –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
                if strategy.get('rate_limit', False):
                    await self._rate_limit_check(strategy['name'])
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ª—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                timeout = strategy.get('timeout', 20.0)
                
                response = await asyncio.wait_for(
                    asyncio.to_thread(strategy['method']),
                    timeout=timeout
                )
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ Client API –æ—Ç–≤–µ—Ç–∞
                if hasattr(response, 'choices') and response.choices:
                    content = response.choices[0].message.content
                    if content and len(content.strip()) > 5:
                        cleaned_response = self._clean_response(content)
                        logging.info(f"‚úÖ {strategy['name']} —É—Å–ø–µ—à–Ω–∞ (–¥–ª–∏–Ω–∞: {len(cleaned_response)} —Å–∏–º–≤–æ–ª–æ–≤, –≤—Ä–µ–º—è: {timeout}s)")
                        
                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö DeepSeek
                        if 'deepseek' in strategy['name'].lower():
                            logging.info("üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –±—ã—Å—Ç—Ä–∞—è DeepSeek –º–æ–¥–µ–ª—å")
                        
                        return cleaned_response
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ Legacy API –æ—Ç–≤–µ—Ç–∞
                elif isinstance(response, str) and len(response.strip()) > 5:
                    cleaned_response = self._clean_response(response)
                    logging.info(f"‚úÖ {strategy['name']} —É—Å–ø–µ—à–Ω–∞ (–¥–ª–∏–Ω–∞: {len(cleaned_response)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    return cleaned_response
                        
                logging.warning(f"‚ùå {strategy['name']}: –ü—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç")
                        
            except asyncio.TimeoutError:
                logging.warning(f"‚ùå {strategy['name']}: –¢–∞–π–º–∞—É—Ç ({timeout}s) - —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ")
                
            except Exception as e:
                error_msg = str(e)[:200]
                logging.warning(f"‚ùå {strategy['name']}: {error_msg}")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ DeepSeek
                if "rate_limit" in error_msg.lower() or "quota" in error_msg.lower():
                    logging.warning("üö® DeepSeek rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ ultra-fast –º–æ–¥–µ–ª–∏...")
                    continue
                    
                if "unavailable" in error_msg.lower() or "maintenance" in error_msg.lower():
                    logging.warning("üö® DeepSeek –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏...")
                    continue
                    
                # –ï—Å–ª–∏ API –∫–ª—é—á –ø—Ä–æ–±–ª–µ–º–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                if "api_key" in error_msg.lower() or "authentication" in error_msg.lower():
                    continue
                    
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        logging.error("‚ùå –í—Å–µ –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã AI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return "‚ùå –í—Å–µ –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. DeepSeek –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    async def test_fast_models_speed(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –±—ã—Å—Ç—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        logging.info("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –±—ã—Å—Ç—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π...")
        
        test_results = {
            'deepseek_chat_speed': None,
            'deepseek_v3_speed': None,
            'deepseek_coder_speed': None,
            'fastest_overall': None,
            'test_time': time.time()
        }
        
        # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
        test_prompt = "Hi! Reply with just 'OK'"
        
        # –¢–µ—Å—Ç –±—ã—Å—Ç—Ä—ã—Ö DeepSeek –º–æ–¥–µ–ª–µ–π
        fast_models = [
            ('deepseek-chat', 'deepseek_chat_speed'),
            ('deepseek-v3', 'deepseek_v3_speed'),
            ('deepseek-coder', 'deepseek_coder_speed')
        ]
        
        fastest_time = float('inf')
        fastest_model = None
        
        for model_name, result_key in fast_models:
            try:
                start_time = time.time()
                response = await asyncio.wait_for(
                    asyncio.to_thread(
                        lambda: self.client.chat.completions.create(
                            model=model_name,
                            messages=[{"role": "user", "content": test_prompt}],
                            max_tokens=10,
                            temperature=0.1
                        )
                    ),
                    timeout=15.0
                )
                
                if hasattr(response, 'choices') and response.choices:
                    content = response.choices[0].message.content
                    if content:
                        response_time = time.time() - start_time
                        test_results[result_key] = response_time
                        
                        if response_time < fastest_time:
                            fastest_time = response_time
                            fastest_model = model_name
                        
                        logging.info(f"‚ö° {model_name}: {response_time:.2f}s")
                
            except Exception as e:
                logging.warning(f"‚ùå {model_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏: {str(e)[:100]}")
        
        if fastest_model:
            test_results['fastest_overall'] = {
                'model': fastest_model,
                'time': fastest_time
            }
            logging.info(f"üèÜ –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å: {fastest_model} ({fastest_time:.2f}s)")
        
        return test_results

    async def get_speed_status(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π"""
        try:
            speed_results = await self.test_fast_models_speed()
            
            status_lines = ["‚ö° –°—Ç–∞—Ç—É—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π:"]
            
            # DeepSeek —Å–∫–æ—Ä–æ—Å—Ç—å
            if speed_results['deepseek_chat_speed']:
                status_lines.append(f"üöÄ DeepSeek Chat: {speed_results['deepseek_chat_speed']:.1f}s")
            else:
                status_lines.append("‚ùå DeepSeek Chat: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
            if speed_results['deepseek_v3_speed']:
                status_lines.append(f"üöÄ DeepSeek V3: {speed_results['deepseek_v3_speed']:.1f}s")
            else:
                status_lines.append("‚ùå DeepSeek V3: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            if speed_results['deepseek_coder_speed']:
                status_lines.append(f"üíª DeepSeek Coder: {speed_results['deepseek_coder_speed']:.1f}s")
            else:
                status_lines.append("‚ùå DeepSeek Coder: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å
            if speed_results['fastest_overall']:
                fastest = speed_results['fastest_overall']
                status_lines.append(f"üèÜ –õ–∏–¥–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏: {fastest['model']} ({fastest['time']:.1f}s)")
            else:
                status_lines.append("‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
            return "\n".join(status_lines)
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏: {str(e)[:100]}"

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
g4f_api_service = G4FAPI()