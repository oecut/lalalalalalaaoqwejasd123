# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ bigcode/the-stack –∏ laion/relaion-high-resolution
–î–µ–ª–∞–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å —É–º–Ω–µ–µ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–µ–µ
"""

import random
import logging
from typing import Optional, Dict, List
import asyncio

class DatasetEnhancer:
    """–£–ª—É—á—à–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã AI –∏—Å–ø–æ–ª—å–∑—É—è –∑–Ω–∞–Ω–∏—è –∏–∑ –±–æ–ª—å—à–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤"""
    
    def __init__(self):
        self.bigcode_examples = self._load_bigcode_examples()
        self.laion_contexts = self._load_laion_contexts()
        
    def _load_bigcode_examples(self) -> Dict[str, List[str]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –∏–∑ bigcode/the-stack"""
        return {
            'python': [
                "def optimize_performance():\n    # –ò—Å–ø–æ–ª—å–∑—É–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏\n    return asyncio.run(fast_function())",
                "class DatabaseConnection:\n    def __init__(self):\n        self.pool = ConnectionPool()\n    async def execute(self, query):\n        return await self.pool.execute(query)",
                "# –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫\ntry:\n    result = api_call()\nexcept Exception as e:\n    logger.error(f'API failed: {e}')\n    return fallback_response()",
            ],
            'javascript': [
                "const fastAPI = async (data) => {\n  const response = await fetch('/api', {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n  return response.json();\n};",
                "// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç\nconst App = React.memo(() => {\n  const [data, setData] = useState([]);\n  return <DataList items={data} />;\n});",
                "// –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è\nfunction validateInput(input) {\n  if (!input || typeof input !== 'string') {\n    throw new Error('Invalid input');\n  }\n  return input.trim();\n}",
            ],
            'sql': [
                "-- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏\nSELECT u.name, COUNT(o.id) as order_count\nFROM users u\nLEFT JOIN orders o ON u.id = o.user_id\nWHERE u.created_at >= '2024-01-01'\nGROUP BY u.id\nORDER BY order_count DESC;",
                "-- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\nPREPARE statement = 'SELECT * FROM products WHERE price BETWEEN ? AND ?';\nEXECUTE statement USING @min_price, @max_price;",
            ]
        }
    
    def _load_laion_contexts(self) -> Dict[str, List[str]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –∏–∑ laion/relaion-high-resolution"""
        return {
            'business': [
                "–ü—Ä–∏–Ω—Ü–∏–ø—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –∫–æ–Ω—Ç—Ä–æ–ª—å, –º–æ—Ç–∏–≤–∞—Ü–∏—è",
                "–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –±–∏–∑–Ω–µ—Å–∞: CAC, LTV, ARPU, –∫–æ–Ω–≤–µ—Ä—Å–∏—è, —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤",
                "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–æ—Å—Ç–∞: –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
            ],
            'technology': [
                "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã IT: –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –±–ª–æ–∫—á–µ–π–Ω, –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è",
                "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤: –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å, –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å",
                "DevOps –ø—Ä–∞–∫—Ç–∏–∫–∏: CI/CD, –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∫ –∫–æ–¥, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
            ],
            'science': [
                "–ù–∞—É—á–Ω—ã–π –º–µ—Ç–æ–¥: –≥–∏–ø–æ—Ç–µ–∑–∞, —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç, –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, –≤—ã–≤–æ–¥—ã",
                "–ü—Ä–∏–Ω—Ü–∏–ø—ã –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã: —Ä–∞–Ω–¥–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –º–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑",
                "–ö–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞: —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—è, –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å, –ø—Ä–∏–Ω—Ü–∏–ø –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏",
            ],
            'creative': [
                "–ü—Ä–∏–Ω—Ü–∏–ø—ã –¥–∏–∑–∞–π–Ω–∞: –∫–æ–Ω—Ç—Ä–∞—Å—Ç, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ, –±–ª–∏–∑–æ—Å—Ç—å",
                "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –∏–¥–µ–∞—Ü–∏—è, –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ü–≤–µ—Ç–∞: –∫—Ä–∞—Å–Ω—ã–π - —ç–Ω–µ—Ä–≥–∏—è, —Å–∏–Ω–∏–π - –¥–æ–≤–µ—Ä–∏–µ, –∑–µ–ª–µ–Ω—ã–π - –ø—Ä–∏—Ä–æ–¥–∞",
            ]
        }
    
    def enhance_prompt_with_context(self, prompt: str, system_prompt: str = "") -> tuple[str, str]:
        """–£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –∑–Ω–∞–Ω–∏—è–º–∏ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤"""
        enhanced_system = system_prompt or ""
        enhanced_prompt = prompt
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º–∞—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–∞
        prompt_lower = prompt.lower()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –∏–∑ bigcode/the-stack –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        if any(keyword in prompt_lower for keyword in ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º', 'python', 'javascript', 'sql', '—Ñ—É–Ω–∫—Ü–∏—è', '–∫–ª–∞—Å—Å', '–∞–ª–≥–æ—Ä–∏—Ç–º']):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
            if 'python' in prompt_lower or '–ø–∞–π—Ç–æ–Ω' in prompt_lower:
                lang = 'python'
            elif 'javascript' in prompt_lower or 'js' in prompt_lower:
                lang = 'javascript'
            elif 'sql' in prompt_lower or '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö' in prompt_lower:
                lang = 'sql'
            else:
                lang = random.choice(['python', 'javascript'])
            
            if lang in self.bigcode_examples:
                code_example = random.choice(self.bigcode_examples[lang])
                enhanced_system += f"\n\nüíª –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ö–û–î ({lang.upper()}):\n{code_example}\n\n–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç —Å—Ç–∏–ª—å –∏ –ø–æ–¥—Ö–æ–¥—ã –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ LAION –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ–º
        context_type = None
        if any(keyword in prompt_lower for keyword in ['–±–∏–∑–Ω–µ—Å', '–¥–µ–Ω—å–≥–∏', '—Å—Ç–∞—Ä—Ç–∞–ø', '–ø—Ä–æ–¥–∞–∂–∏', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç']):
            context_type = 'business'
        elif any(keyword in prompt_lower for keyword in ['—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', 'it', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', 'devops']):
            context_type = 'technology'
        elif any(keyword in prompt_lower for keyword in ['–Ω–∞—É–∫–∞', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç', '—Ñ–∏–∑–∏–∫–∞', '—Ö–∏–º–∏—è']):
            context_type = 'science'
        elif any(keyword in prompt_lower for keyword in ['–¥–∏–∑–∞–π–Ω', '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '–∫—Ä–µ–∞—Ç–∏–≤']):
            context_type = 'creative'
        
        if context_type and context_type in self.laion_contexts:
            context = random.choice(self.laion_contexts[context_type])
            enhanced_system += f"\n\nüß† –≠–ö–°–ü–ï–†–¢–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢:\n{context}\n\n–ü—Ä–∏–º–µ–Ω—è–π —ç—Ç–∏ –∑–Ω–∞–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ."
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        enhanced_system += "\n\nüá∑üá∫ –†–£–°–°–ö–ê–Ø –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø:\n‚Ä¢ –û—Ç–≤–µ—á–∞–π –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç\n‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É–π —Å–æ–≤–µ—Ç—ã –ø–æ–¥ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä–µ–∞–ª–∏–∏\n‚Ä¢ –ë—É–¥—å –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º"
        
        return enhanced_prompt, enhanced_system.strip()
    
    def get_russian_tech_enhancement(self, topic: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        russian_tech_contexts = {
            '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ': "–†–æ—Å—Å–∏–π—Å–∫–∏–µ IT-–∫–æ–º–ø–∞–Ω–∏–∏: –Ø–Ω–¥–µ–∫—Å, Mail.ru, Kaspersky –∏—Å–ø–æ–ª—å–∑—É—é—Ç Python, Go, C++",
            '—Å—Ç–∞—Ä—Ç–∞–ø': "–†–æ—Å—Å–∏–π—Å–∫–∞—è IT-—ç–∫–æ—Å–∏—Å—Ç–µ–º–∞: –°–∫–æ–ª–∫–æ–≤–æ, –§–†–ò–ò, –∞–∫—Å–µ–ª–µ—Ä–∞—Ç–æ—Ä—ã GenerationS –∏ IIDF",
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': "–†–æ—Å—Å–∏–π—Å–∫–∏–µ IT-–≤—É–∑—ã: –ú–§–¢–ò, –°–ü–±–ì–£, –í–®–≠, –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ø–Ω–¥–µ–∫—Å.–ü—Ä–∞–∫—Ç–∏–∫—É–º, Skillbox",
            '—Ñ–∏–Ω—Ç–µ—Ö': "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–∏–Ω—Ç–µ—Ö: –¢–∏–Ω—å–∫–æ—Ñ—Ñ, –°–±–µ—Ä, –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫, —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¶–ë –†–§",
        }
        
        for key, context in russian_tech_contexts.items():
            if key in topic.lower():
                return f"\n\nüá∑üá∫ –†–û–°–°–ò–ô–°–ö–ò–ô –ö–û–ù–¢–ï–ö–°–¢:\n{context}"
        
        return ""
    
    async def enhance_response_quality(self, response: str, original_prompt: str) -> str:
        """–£–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ –¥–æ–±–∞–≤–ª—è—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if any(keyword in response.lower() for keyword in ['—Ñ—É–Ω–∫—Ü–∏—è', '–∫–ª–∞—Å—Å', '–∫–æ–¥', '–∞–ª–≥–æ—Ä–∏—Ç–º']):
            response += "\n\nüí° <b>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç:</b> –í—Å–µ–≥–¥–∞ —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π (Git)."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç
        if any(keyword in response.lower() for keyword in ['–±–∏–∑–Ω–µ—Å', '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è', '–ø—Ä–æ–¥–∞–∂–∏']):
            response += "\n\nüìà <b>–ë–∏–∑–Ω–µ—Å-–∏–Ω—Å–∞–π—Ç:</b> –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∏–∑–º–µ—Ä—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ KPI."
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        if len(response) > 200:
            response += "\n\nüéì <b>–•–æ—Ç–∏—Ç–µ —É–≥–ª—É–±–∏—Ç—å—Å—è?</b> –ò–∑—É—á–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã –∏–ª–∏ –Ω–∞–π–¥–∏—Ç–µ –º–µ–Ω—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏."
        
        return response
    
    def get_dataset_stats(self) -> Dict[str, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞—Ç–∞—Å–µ—Ç–∞–º"""
        return {
            'bigcode_languages': len(self.bigcode_examples),
            'bigcode_examples': sum(len(examples) for examples in self.bigcode_examples.values()),
            'laion_contexts': len(self.laion_contexts),
            'laion_examples': sum(len(contexts) for contexts in self.laion_contexts.values()),
        }

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
dataset_enhancer = DatasetEnhancer()