#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ GDPBoost
–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 100k+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import asyncio
import signal
import sys
import os
from contextlib import asynccontextmanager

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from config import bot_config, settings
from app.services.database import db
from app.middlewares.throttling import ThrottlingMiddleware

# –•—ç–Ω–¥–ª–µ—Ä—ã
from app.handlers import private_handlers, group_handlers, admin_handlers, user_handlers, business_handlers


class HighPerformanceBot:
    """–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è 100k+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        self.bot = Bot(
            token=bot_config.token,
            default=DefaultBotProperties(
                parse_mode=ParseMode.HTML,
                link_preview_is_disabled=True,
                protect_content=False
            )
        )
        
        # –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å MemoryStorage –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.dp = Dispatcher(storage=MemoryStorage())
        
        # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
        self.dp.message.middleware(ThrottlingMiddleware())
        
        self._setup_handlers()
        self._setup_shutdown_handler()
    
    def _setup_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤"""
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        self.dp.include_routers(
            admin_handlers.router,      # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã - –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            user_handlers.router,       # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã 
            business_handlers.router,   # Business —á–∞—Ç—ã
            group_handlers.router,      # –ì—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã
            private_handlers.router     # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –ø–æ—Å–ª–µ–¥–Ω–∏–π
        )
        
    
    def _setup_shutdown_handler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
        def signal_handler(signum, frame):
            asyncio.create_task(self.shutdown())
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    async def startup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await db.initialize()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
            bot_info = await self.bot.get_me()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
            for admin_id in bot_config.admin_ids:
                try:
                    await self.bot.send_message(
                        admin_id,
                        "üöÄ <b>GDPBoost Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                        f"ü§ñ –ë–æ—Ç: @{bot_info.username}\n"
                        f"‚ö° –†–µ–∂–∏–º: –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
                        f"üë• –ì–æ—Ç–æ–≤ –∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é 100k+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                        parse_mode=ParseMode.HTML
                    )
                except Exception:
                    pass
            
            
        except Exception as e:
            raise
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            await db.close()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
            await self.bot.session.close()
            
        except Exception:
            pass
        
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            await self.startup()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
            await self.dp.start_polling(
                self.bot,
                allowed_updates=[
                    "message", 
                    "callback_query", 
                    "my_chat_member",
                    "chat_member"
                ],
                drop_pending_updates=True  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            )
            
        except Exception as e:
            raise
        finally:
            await self.shutdown()

@asynccontextmanager
async def lifespan():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    bot_instance = HighPerformanceBot()
    try:
        yield bot_instance
    finally:
        await bot_instance.shutdown()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        async with lifespan() as bot_instance:
            await bot_instance.run()
    except KeyboardInterrupt:
        pass
    except Exception:
        sys.exit(1)

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        sys.exit(1)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É event loop –¥–ª—è Windows
    if sys.platform.startswith('win'):
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
    except Exception:
        sys.exit(1)