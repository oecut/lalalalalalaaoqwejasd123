# /ErrrorBot/app/handlers/private_handlers.py

from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.exceptions import TelegramBadRequest, TelegramNetworkError
from aiogram.enums import ParseMode, ChatType
import logging
import asyncio
import html

from app.services.database import db
from app.services.g4f_api import g4f_api_service
from app.handlers.common_handlers import (
    send_safe_message, validate_prompt, check_user_limits
)
from app.utils import format_ai_response_to_html
from config import settings

router = Router()




@router.message(F.chat.type == ChatType.PRIVATE)
async def handle_private_message(message: Message, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö (–Ω–µ business).
    –†–∞–±–æ—Ç–∞–µ—Ç –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏—á–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã .ai –∏ .–∏–∏
    """
    if not message.text:
        return
    
    message_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã .ai –∏–ª–∏ .–∏–∏
    if not (message_text.lower().startswith(".ai") or message_text.lower().startswith(".–∏–∏")):
        return
    
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if not await check_user_limits(message):
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if message_text.lower().startswith(".–∏–∏"):
        prompt = message_text[3:].strip()
    else:
        prompt = message_text[3:].strip()
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
    is_valid, error_message = validate_prompt(prompt)
    if not is_valid:
        await send_safe_message(
            bot, chat_id, error_message,
            reply_to_message_id=message.message_id
        )
        return

    # üé¨ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—á–∞—Ç–∞–Ω–∏—è –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    safe_prompt_preview = html.escape(prompt[:50])
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è
    async def show_typing_animation():
        await bot.send_chat_action(chat_id, "typing")
        await asyncio.sleep(0.5)  # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    
    status_text = f'<b>‚ö° errorer bot –ø–µ—á–∞—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ "{safe_prompt_preview}..."</b>'
    
    status_message_id = await send_safe_message(
        bot, chat_id,
        status_text,
        reply_to_message_id=message.message_id
    )
    
    if not status_message_id:
        return

    try:
        # –î–ª—è –õ–° –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_style_prompt = await db.get_active_style_prompt(user_id)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—á–∞—Ç–∞–Ω–∏—è
        response = await g4f_api_service.generate_text(
            prompt=prompt, 
            system_prompt=active_style_prompt or "",
            show_typing=show_typing_animation
        )
        
        if len(response.strip()) < 10:
            response = "–ü–æ–ª—É—á–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        formatted_ai_response = format_ai_response_to_html(response)
        safe_user_name = html.escape(user_name)
        safe_prompt = html.escape(prompt)
        
        final_text = (
            f"<blockquote>{safe_user_name}: {safe_prompt}</blockquote>\n\n"
            f"üí¨ <b>{formatted_ai_response}</b>"
        )
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        success = await send_safe_message(
            bot, chat_id, final_text,
            edit=True, message_id=status_message_id
        )
        
        if success:
            await db.increment_user_requests(user_id, 'text')
            
    except Exception:
        await send_safe_message(
            bot, chat_id,
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>",
            edit=True, message_id=status_message_id
        )