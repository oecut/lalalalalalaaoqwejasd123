# /ErorrBot/app/handlers/admin_handlers.py

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, MessageEntity
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
import asyncio
from typing import Union

from config import bot_config
from app.services.database import db
from app.keyboards import inline as kb
from app.states.admin_states import Broadcast, DemoMode, SimpleDemoMode, GroupBroadcast

class AdminFilter:
    def __call__(self, event: Union[Message, CallbackQuery]) -> bool:
        return event.from_user.id in bot_config.admin_ids

router = Router()
router.message.filter(AdminFilter())
router.callback_query.filter(AdminFilter())

@router.callback_query(F.data == "menu_admin")
async def handle_admin_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    admin_text = "üñ•Ô∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>"
    await callback.message.edit_text(admin_text, reply_markup=kb.get_admin_menu())
    await callback.answer()

# === –†–ê–°–°–´–õ–ö–ò –í –õ–ò–ß–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ===
@router.callback_query(F.data == "admin_broadcast")
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Broadcast.waiting_for_message)
    broadcast_help_text = (
        "üì¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
        "<blockquote>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram.</blockquote>\n\n"
        "<blockquote><i>–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.</i></blockquote>"
    )
    await callback.message.edit_text(broadcast_help_text, reply_markup=kb.get_back_button("menu_admin"))
    await callback.answer()

@router.message(StateFilter(Broadcast.waiting_for_message))
async def process_broadcast(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    user_ids = await db.get_all_user_ids()
    sent_count, failed_count = 0, 0
    
    broadcast_text = message.text or message.caption
    broadcast_entities = message.entities or message.caption_entities
    
    if not broadcast_text:
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞!", reply_markup=kb.get_admin_menu())
        return
    
    status_message = await message.answer(
        f"<b>‚úÖ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</b>",
    )
    
    for user_id in user_ids:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=broadcast_text,
                entities=broadcast_entities,
                parse_mode=None
            )
            sent_count += 1
            await asyncio.sleep(0.05)
        except Exception as e:
            failed_count += 1
            if "blocked" in str(e).lower():
                await db.mark_user_blocked(user_id)
    
    result_text = (
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{sent_count}</b>\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: <b>{failed_count}</b>"
    )
    await status_message.edit_text(result_text, reply_markup=kb.get_admin_menu())

# === –†–ê–°–°–´–õ–ö–ò –í –ì–†–£–ü–ü–û–í–´–ï –ß–ê–¢–´ ===
@router.callback_query(F.data == "admin_group_broadcast")
async def start_group_broadcast(callback: CallbackQuery, state: FSMContext):
    await state.set_state(GroupBroadcast.waiting_for_message)
    broadcast_help_text = (
        "üì¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≥—Ä—É–ø–ø–æ–≤—ã–º —á–∞—Ç–∞–º</b>\n\n"
        "<blockquote>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram.</blockquote>\n\n"
        "<blockquote><i>–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–≥–æ –≤ –≥—Ä—É–ø–ø—ã.</i></blockquote>"
    )
    await callback.message.edit_text(broadcast_help_text, reply_markup=kb.get_back_button("menu_admin"))
    await callback.answer()

@router.message(StateFilter(GroupBroadcast.waiting_for_message))
async def process_group_broadcast(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    group_ids = await db.get_all_group_chat_ids()
    sent_count, failed_count = 0, 0
    
    broadcast_text = message.text or message.caption
    broadcast_entities = message.entities or message.caption_entities
    
    if not broadcast_text:
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞!", reply_markup=kb.get_admin_menu())
        return
    
    status_message = await message.answer(
        f"<b>‚úÖ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –≥—Ä—É–ø–ø–æ–≤—ã–º —á–∞—Ç–∞–º –¥–ª—è {len(group_ids)} –≥—Ä—É–ø–ø...</b>",
    )
    
    for group_id in group_ids:
        try:
            await bot.send_message(
                chat_id=group_id,
                text=broadcast_text,
                entities=broadcast_entities,
                parse_mode=None
            )
            sent_count += 1
            await asyncio.sleep(0.1)  # –ë–æ–ª—å—à–µ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø
        except Exception as e:
            failed_count += 1
    
    result_text = (
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥—Ä—É–ø–ø–æ–≤—ã–º —á–∞—Ç–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø: <b>{sent_count}</b>\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: <b>{failed_count}</b>"
    )
    await status_message.edit_text(result_text, reply_markup=kb.get_admin_menu())

# === –ê–ù–ò–ú–ò–†–û–í–ê–ù–ù–û–ï –î–ï–ú–û ===
@router.callback_query(F.data == "admin_demo_mode")
async def demo_mode_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    all_triggers = await db.get_all_demo_triggers()
    animated_triggers = [(t[0], t[1], t[2], t[3]) for t in all_triggers if t[3]]
    
    text = "üé¨ <b>–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–µ–º–æ</b>\n\n<blockquote>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</blockquote>"
    
    if animated_triggers:
        text += "\n\n<b>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã:</b>\n"
        for _, user_id, trigger_text, _ in animated_triggers:
            text += f"‚Ä¢ <code>{trigger_text}</code> –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>\n"
    else:
        text += "\n\n<i>–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.</i>"
        
    await callback.message.edit_text(text, reply_markup=kb.get_demo_mode_menu(animated_triggers))
    await callback.answer()

@router.callback_query(F.data == "admin_demo_add")
async def add_demo_trigger_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DemoMode.waiting_for_user_id)
    help_text = (
        "üé¨ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞</b>\n\n"
        "<blockquote>–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç—Ä–∏–≥–≥–µ—Ä.\n\n"
        "–¢—Ä–∏–≥–≥–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</blockquote>"
    )
    await callback.message.edit_text(help_text, reply_markup=kb.get_back_button("admin_demo_mode"))
    await callback.answer()

@router.message(StateFilter(DemoMode.waiting_for_user_id))
async def process_demo_user_id(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(
            "‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=kb.get_back_button("admin_demo_mode")
        )
        return
    
    user_id = int(message.text)
    await state.update_data(user_id=user_id)
    await state.set_state(DemoMode.waiting_for_trigger_text)
    
    await message.answer(
        f"‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{user_id}</b>\n\n"
        "<blockquote>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç-—Ç—Ä–∏–≥–≥–µ—Ä.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ <code>test —Ç–µ—Å—Ç</code>\n"
        "‚Ä¢ <code>–ø—Ä–∏–≤–µ—Ç</code>\n"
        "‚Ä¢ <code>.ai demo</code>\n\n"
        "–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–Ω–∏–º–∞—Ü–∏—è.</blockquote>",
        reply_markup=kb.get_back_button("admin_demo_mode")
    )

@router.message(StateFilter(DemoMode.waiting_for_trigger_text))
async def process_demo_trigger_text(message: Message, state: FSMContext):
    trigger_text = message.text.strip()
    await state.update_data(trigger_text=trigger_text)
    await state.set_state(DemoMode.waiting_for_responses)
    
    await message.answer(
        f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä: <code>{trigger_text}</code>\n\n"
        "<blockquote>–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å.\n\n"
        "<b>–ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.</b>\n"
        "–ë–æ—Ç –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 —Å–µ–∫—É–Ω–¥–∞.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>–ó–∞–≥—Ä—É–∑–∫–∞...\n"
        "–ó–∞–≥—Ä—É–∑–∫–∞ 50%...\n"
        "–ì–æ—Ç–æ–≤–æ!</code>\n\n"
        "–ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, <tg-spoiler>—Å–ø–æ–π–ª–µ—Ä—ã</tg-spoiler>, –∫–æ–¥).</blockquote>",
        reply_markup=kb.get_back_button("admin_demo_mode")
    )

def convert_entities_to_dict(entities):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç entities –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    if not entities:
        return None
    
    entities_list = []
    for entity in entities:
        entity_dict = {
            'type': entity.type,
            'offset': entity.offset,
            'length': entity.length
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if hasattr(entity, 'url') and entity.url:
            entity_dict['url'] = entity.url
        if hasattr(entity, 'user') and entity.user:
            entity_dict['user_id'] = entity.user.id
        if hasattr(entity, 'language') and entity.language:
            entity_dict['language'] = entity.language
            
        entities_list.append(entity_dict)
    
    return entities_list

@router.message(StateFilter(DemoMode.waiting_for_responses))
async def process_demo_responses(message: Message, state: FSMContext):
    if not message.text:
        await message.answer(
            "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.",
            reply_markup=kb.get_back_button("admin_demo_mode")
        )
        return
    
    responses = [msg.strip() for msg in message.text.split('\n') if msg.strip()]
    
    if not responses:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=kb.get_back_button("admin_demo_mode")
        )
        return
    
    if len(responses) < 1:
        await message.answer(
            "‚ùå –ù—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏.",
            reply_markup=kb.get_back_button("admin_demo_mode")
        )
        return
    
    data = await state.get_data()
    user_id = data['user_id']
    trigger_text = data['trigger_text']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º entities –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    entities_dict = convert_entities_to_dict(message.entities)
    
    try:
        await db.add_demo_trigger(user_id, trigger_text, responses, is_animated=True, entities=entities_dict)
        await state.clear()
        
        preview = "\n".join([f"{i+1}. {resp[:50]}..." if len(resp) > 50 else f"{i+1}. {resp}" 
                           for i, resp in enumerate(responses)])
        
        success_text = (
            f"‚úÖ <b>–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–º–æ-—Ç—Ä–∏–≥–≥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n"
            f"üéØ –¢—Ä–∏–≥–≥–µ—Ä: <code>{trigger_text}</code>\n"
            f"üé¨ –≠—Ç–∞–ø–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏: <b>{len(responses)}</b>\n\n"
            f"<b>–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>\n{preview}"
        )
        
        await message.answer(success_text, reply_markup=kb.get_admin_menu())
        
    except Exception as e:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=kb.get_admin_menu()
        )

# === –ü–†–û–°–¢–û–ï –î–ï–ú–û ===
@router.callback_query(F.data == "admin_simple_demo_mode")
async def simple_demo_mode_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    all_triggers = await db.get_all_demo_triggers()
    simple_triggers = [(t[0], t[1], t[2], t[3]) for t in all_triggers if not t[3]]
    
    text = "üìù <b>–ü—Ä–æ—Å—Ç–æ–µ –¥–µ–º–æ</b>\n\n<blockquote>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏.</blockquote>"
    
    if simple_triggers:
        text += "\n\n<b>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Å—Ç—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã:</b>\n"
        for _, user_id, trigger_text, _ in simple_triggers:
            text += f"‚Ä¢ <code>{trigger_text}</code> –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>\n"
    else:
        text += "\n\n<i>–ü—Ä–æ—Å—Ç—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.</i>"
        
    await callback.message.edit_text(text, reply_markup=kb.get_simple_demo_mode_menu(simple_triggers))
    await callback.answer()

@router.callback_query(F.data == "admin_simple_demo_add")
async def add_simple_demo_trigger_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SimpleDemoMode.waiting_for_user_id)
    help_text = (
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞</b>\n\n"
        "<blockquote>–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç—Ä–∏–≥–≥–µ—Ä.\n\n"
        "–¢—Ä–∏–≥–≥–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</blockquote>"
    )
    await callback.message.edit_text(help_text, reply_markup=kb.get_back_button("admin_simple_demo_mode"))
    await callback.answer()

@router.message(StateFilter(SimpleDemoMode.waiting_for_user_id))
async def process_simple_demo_user_id(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(
            "‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=kb.get_back_button("admin_simple_demo_mode")
        )
        return
    
    user_id = int(message.text)
    await state.update_data(user_id=user_id)
    await state.set_state(SimpleDemoMode.waiting_for_trigger_text)
    
    await message.answer(
        f"‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{user_id}</b>\n\n"
        "<blockquote>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç-—Ç—Ä–∏–≥–≥–µ—Ä.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ <code>–ø—Ä–∏–≤–µ—Ç</code>\n"
        "‚Ä¢ <code>–∫–∞–∫ –¥–µ–ª–∞</code>\n"
        "‚Ä¢ <code>demo</code>\n\n"
        "–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –ø—Ä–æ—Å—Ç—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.</blockquote>",
        reply_markup=kb.get_back_button("admin_simple_demo_mode")
    )

@router.message(StateFilter(SimpleDemoMode.waiting_for_trigger_text))
async def process_simple_demo_trigger_text(message: Message, state: FSMContext):
    trigger_text = message.text.strip()
    await state.update_data(trigger_text=trigger_text)
    await state.set_state(SimpleDemoMode.waiting_for_response)
    
    await message.answer(
        f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä: <code>{trigger_text}</code>\n\n"
        "<blockquote>–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä.\n\n"
        "<b>–ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram:</b>\n"
        "‚Ä¢ <b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>\n"
        "‚Ä¢ <i>–ö—É—Ä—Å–∏–≤</i>\n"
        "‚Ä¢ <code>–ö–æ–¥</code>\n"
        "‚Ä¢ <blockquote>–¶–∏—Ç–∞—Ç–∞</blockquote>\n"
        "‚Ä¢ <s>–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</s>\n"
        "‚Ä¢ <u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>\n"
        "‚Ä¢ <tg-spoiler>–°–ø–æ–π–ª–µ—Ä</tg-spoiler></blockquote>",
        reply_markup=kb.get_back_button("admin_simple_demo_mode")
    )

@router.message(StateFilter(SimpleDemoMode.waiting_for_response))
async def process_simple_demo_response(message: Message, state: FSMContext):
    if not message.text:
        await message.answer(
            "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º.",
            reply_markup=kb.get_back_button("admin_simple_demo_mode")
        )
        return
    
    response_text = message.text.strip()
    
    if not response_text:
        await message.answer(
            "‚ùå –û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.",
            reply_markup=kb.get_back_button("admin_simple_demo_mode")
        )
        return
    
    data = await state.get_data()
    user_id = data['user_id']
    trigger_text = data['trigger_text']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º entities –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    entities_dict = convert_entities_to_dict(message.entities)
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        await db.add_demo_trigger(user_id, trigger_text, [response_text], is_animated=False, entities=entities_dict)
        await state.clear()
        
        success_text = (
            f"‚úÖ <b>–ü—Ä–æ—Å—Ç–æ–π –¥–µ–º–æ-—Ç—Ä–∏–≥–≥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n"
            f"üéØ –¢—Ä–∏–≥–≥–µ—Ä: <code>{trigger_text}</code>\n"
            f"üìù –û—Ç–≤–µ—Ç: <code>{response_text[:100]}{'...' if len(response_text) > 100 else ''}</code>"
        )
        
        await message.answer(success_text, reply_markup=kb.get_admin_menu())
        
    except Exception as e:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=kb.get_admin_menu()
        )

# === –£–î–ê–õ–ï–ù–ò–ï –¢–†–ò–ì–ì–ï–†–û–í ===
@router.callback_query(F.data == "admin_demo_delete_list")
async def list_triggers_to_delete(callback: CallbackQuery):
    all_triggers = await db.get_all_demo_triggers()
    animated_triggers = [(t[0], t[1], t[2], t[3]) for t in all_triggers if t[3]]
    
    if not animated_triggers:
        await callback.answer("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>", 
        reply_markup=kb.get_demo_delete_keyboard(animated_triggers)
    )
    await callback.answer()

@router.callback_query(F.data == "admin_simple_demo_delete_list")
async def list_simple_triggers_to_delete(callback: CallbackQuery):
    all_triggers = await db.get_all_demo_triggers()
    simple_triggers = [(t[0], t[1], t[2], t[3]) for t in all_triggers if not t[3]]
    
    if not simple_triggers:
        await callback.answer("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Å—Ç—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ–π —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>", 
        reply_markup=kb.get_simple_demo_delete_keyboard(simple_triggers)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("admin_demo_delete_"))
async def delete_trigger(callback: CallbackQuery, state: FSMContext):
    try:
        trigger_id = int(callback.data.split("_")[-1])
        await db.delete_demo_trigger(trigger_id)
        await callback.answer("‚úÖ –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä —É–¥–∞–ª–µ–Ω!", show_alert=True)
        await demo_mode_menu(callback, state)
    except (ValueError, TypeError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞.", show_alert=True)
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞.", show_alert=True)

@router.callback_query(F.data.startswith("admin_simple_demo_delete_"))
async def delete_simple_trigger(callback: CallbackQuery, state: FSMContext):
    try:
        trigger_id = int(callback.data.split("_")[-1])
        await db.delete_demo_trigger(trigger_id)
        await callback.answer("‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Ç—Ä–∏–≥–≥–µ—Ä —É–¥–∞–ª–µ–Ω!", show_alert=True)
        await simple_demo_mode_menu(callback, state)
    except (ValueError, TypeError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞.", show_alert=True)
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞.", show_alert=True)

# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
@router.callback_query(F.data == "admin_global_stats")
async def show_global_stats(callback: CallbackQuery):
    try:
        stats = await db.get_extended_stats()
        all_triggers = await db.get_all_demo_triggers()
        animated_triggers = len([t for t in all_triggers if t[3]])
        simple_triggers = len([t for t in all_triggers if not t[3]])
        
        text = f"""üìä <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats.get('total_users', 0)}</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (–∑–∞ –Ω–µ–¥–µ–ª—é): <b>{stats.get('active_users', 0)}</b>
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: <b>{stats.get('blocked_users', 0)}</b>

üè† <b>–ì—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ –≥—Ä—É–ø–ø —Å –±–æ—Ç–æ–º: <b>{stats.get('total_groups', 0)}</b>
‚Ä¢ –û–±—â–µ–µ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{stats.get('total_group_members', 0)}</b>

üí¨ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò: <b>{stats.get('total_text', 0)}</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è): <b>{stats.get('total_requests_all_time', 0)}</b>

üé¨ <b>–î–µ–º–æ-—Ä–µ–∂–∏–º:</b>
‚Ä¢ –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: <b>{animated_triggers}</b>
‚Ä¢ –ü—Ä–æ—Å—Ç—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: <b>{simple_triggers}</b>"""
        
        await callback.message.edit_text(text, reply_markup=kb.get_back_button("menu_admin"))
        await callback.answer()
        
    except Exception as e:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", 
            reply_markup=kb.get_back_button("menu_admin")
        )
        await callback.answer()

@router.callback_query(F.data == "admin_group_list")
async def show_group_list(callback: CallbackQuery):
    try:
        groups = await db.get_all_group_chats()
        
        if not groups:
            await callback.answer("–ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∏ –≤ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É.", show_alert=True)
            return
        
        text = "üè† <b>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ —Å –±–æ—Ç–æ–º:</b>\n\n"
        
        for i, (chat_id, chat_title, member_count, last_updated) in enumerate(groups[:20], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 –≥—Ä—É–ø–ø–∞–º–∏
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            display_title = chat_title[:30] + "..." if len(chat_title) > 30 else chat_title
            text += f"{i}. <b>{display_title}</b>\n"
            text += f"   ID: <code>{chat_id}</code>\n"
            text += f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{member_count}</b>\n"
            text += f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: <i>{last_updated[:16] if last_updated else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</i>\n\n"
        
        if len(groups) > 20:
            text += f"<i>... –∏ –µ—â–µ {len(groups) - 20} –≥—Ä—É–ø–ø</i>"
        
        await callback.message.edit_text(text, reply_markup=kb.get_back_button("menu_admin"))
        await callback.answer()
        
    except Exception as e:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø.", 
            reply_markup=kb.get_back_button("menu_admin")
        )
        await callback.answer()