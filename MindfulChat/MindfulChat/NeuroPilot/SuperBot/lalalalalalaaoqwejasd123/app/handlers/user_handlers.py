# /ErorrBot/app/handlers/user_handlers.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext

from messages import Greetings, Menus, Help, Buttons
from app.keyboards import inline as kb
from app.services.database import db
from app.states.user_states import StyleInput, GroupStyleInput, GroupStyleSelection
from config import settings

router = Router()

@router.message(CommandStart())
async def handle_start_command(message: Message, state: FSMContext):
    await state.clear()
    user = message.from_user
    await db.add_or_update_user(user_id=user.id, username=user.username, first_name=user.first_name)
    await message.answer(text=Greetings.start_message, reply_markup=kb.get_main_menu(user.id))

@router.callback_query(F.data == "back_to_main")
async def handle_back_to_main(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(text=Greetings.start_message, reply_markup=kb.get_main_menu(callback.from_user.id))
    await callback.answer()

@router.callback_query(F.data == "menu_help")
async def handle_help_menu(callback: CallbackQuery):
    await callback.message.edit_text(text=Help.help_message, reply_markup=kb.get_back_button("back_to_main"), disable_web_page_preview=True)
    await callback.answer()

@router.callback_query(F.data == "menu_faq")
async def handle_faq_menu(callback: CallbackQuery):
    await callback.message.edit_text(text=Help.faq_message, reply_markup=kb.get_back_button("back_to_main"), disable_web_page_preview=True)
    await callback.answer()

@router.callback_query(F.data == "menu_stats")
async def handle_stats_menu(callback: CallbackQuery):
    try:
        stats_data = await db.get_user_stats(callback.from_user.id)
        if stats_data:
            remaining_requests = max(0, settings.daily_request_limit - stats_data.get('user_today_total', 0))
            
            stats_text = f"""üìà <b>–õ–∏—á–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b>

üíØ <b>–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>
<blockquote>üìÖ –°–µ–≥–æ–¥–Ω—è: <b>{stats_data.get('user_today_total', 0)}</b> –∑–∞–ø—Ä–æ—Å–æ–≤
üìà –í—Å–µ–≥–æ: <b>{stats_data.get('total_text', 0)}</b> –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò
üíé –û–±—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã: <b>{stats_data.get('total_requests_all_time', 0)}</b></blockquote>

‚ö° <b>–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>
<blockquote>üî• <b>{remaining_requests}</b> –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ {settings.daily_request_limit}</blockquote>

üåç <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>
<blockquote>üë§ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: <b>{stats_data.get('active_users', 0)}</b>
üë• –ì—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã: <b>{stats_data.get('total_groups', 0)}</b></blockquote>"""
        else:
            stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n<blockquote>üöÄ –ù–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É!</blockquote>"
    except Exception as e:
        stats_text = "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</b>\n\n<blockquote>üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–º–µ–Ω—Ç–æ–≤</blockquote>"
        
    await callback.message.edit_text(text=stats_text, reply_markup=kb.get_back_button("back_to_main"))
    await callback.answer()

@router.callback_query(F.data == "menu_settings")
async def handle_settings_menu(callback: CallbackQuery):
    await callback.message.edit_text(text=Menus.settings_menu, reply_markup=kb.get_settings_menu())
    await callback.answer()

@router.callback_query(F.data == "back_to_settings")
async def handle_back_to_settings(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(text=Menus.settings_menu, reply_markup=kb.get_settings_menu())
    await callback.answer()

@router.callback_query(F.data == "settings_styles")
async def handle_styles_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(text=Menus.styles_menu, reply_markup=kb.get_styles_menu())
    await callback.answer()

# === –õ–ò–ß–ù–´–ï –°–¢–ò–õ–ò ===
@router.callback_query(F.data == "styles_personal")
async def handle_personal_styles_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(text=Menus.personal_styles_menu, reply_markup=kb.get_personal_styles_menu())
    await callback.answer()

@router.callback_query(F.data == "personal_styles_add")
async def handle_add_personal_style_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(StyleInput.waiting_for_style_name)
    await callback.message.edit_text(text=Menus.add_style_prompt_name, reply_markup=kb.get_back_button("styles_personal"))
    await callback.answer()

@router.message(StateFilter(StyleInput.waiting_for_style_name), F.text)
async def process_personal_style_name(message: Message, state: FSMContext):
    await state.update_data(style_name=message.text)
    await state.set_state(StyleInput.waiting_for_style_prompt)
    await message.answer(
        "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
        "<blockquote>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è (—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç). –ù–∞–ø—Ä–∏–º–µ—Ä: \"–û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –≤ —Å—Ç–∏–ª–µ –ø–∏—Ä–∞—Ç–∞\" –∏–ª–∏ \"–ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–∏–º\"</blockquote>"
    )

@router.message(StateFilter(StyleInput.waiting_for_style_prompt), F.text)
async def process_personal_style_prompt(message: Message, state: FSMContext):
    data = await state.get_data()
    style_name = data.get("style_name")
    style_prompt = message.text
    
    try:
        await db.add_user_style(message.from_user.id, style_name, style_prompt)
        await state.clear()
        await message.answer(f"‚úÖ <b>–õ–∏—á–Ω—ã–π —Å—Ç–∏–ª—å '{style_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>")
        await message.answer(text=Menus.personal_styles_menu, reply_markup=kb.get_personal_styles_menu())
    except Exception as e:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=kb.get_personal_styles_menu()
        )

@router.callback_query(F.data == "personal_styles_select")
async def handle_select_personal_style(callback: CallbackQuery):
    styles = await db.get_user_styles(callback.from_user.id)
    if not styles:
        await callback.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª–µ–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –æ–¥–∏–Ω.", show_alert=True)
        return
    await callback.message.edit_text(text=Menus.select_personal_style_menu, reply_markup=kb.get_select_personal_style_keyboard(styles))
    await callback.answer()

@router.callback_query(F.data.startswith("personal_style_select_"))
async def process_personal_style_selection(callback: CallbackQuery):
    try:
        style_id = int(callback.data.split("_")[-1])
        await db.set_active_style(callback.from_user.id, style_id)
        styles = await db.get_user_styles(callback.from_user.id)
        await callback.message.edit_text(text=Menus.select_personal_style_menu, reply_markup=kb.get_select_personal_style_keyboard(styles))
        await callback.answer("‚úÖ –õ–∏—á–Ω—ã–π —Å—Ç–∏–ª—å –ø—Ä–∏–º–µ–Ω–µ–Ω!", show_alert=True)
    except (ValueError, TypeError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è.", show_alert=True)

@router.callback_query(F.data == "personal_styles_list")
async def handle_list_personal_styles(callback: CallbackQuery):
    styles = await db.get_user_styles(callback.from_user.id)
    if not styles:
        await callback.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª–µ–π.", show_alert=True)
        return
    
    styles_text = "üìã <b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª–µ–π</b>\n\n"
    for _, style_name, is_active in styles:
        status = " ‚úÖ (–∞–∫—Ç–∏–≤–µ–Ω)" if is_active else ""
        styles_text += f"‚Ä¢ <b>{style_name}</b>{status}\n"
        
    await callback.message.edit_text(text=styles_text, reply_markup=kb.get_back_button("styles_personal"))
    await callback.answer()

# === –ì–†–£–ü–ü–û–í–´–ï –°–¢–ò–õ–ò ===
@router.callback_query(F.data == "styles_group")
async def handle_group_styles_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    user_groups = await db.get_user_group_chats(callback.from_user.id)
    if not user_groups:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ —Å –±–æ—Ç–æ–º. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É.", show_alert=True)
        return
    
    await callback.message.edit_text(text=Menus.group_styles_menu, reply_markup=kb.get_group_styles_menu())
    await callback.answer()

@router.callback_query(F.data == "group_styles_add")
async def handle_add_group_style_start(callback: CallbackQuery, state: FSMContext):
    user_groups = await db.get_user_group_chats(callback.from_user.id)
    if not user_groups:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ —Å –±–æ—Ç–æ–º. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É.", show_alert=True)
        return
    
    await state.set_state(GroupStyleInput.waiting_for_chat_selection)
    await callback.message.edit_text(
        text=Menus.select_group_for_style, 
        reply_markup=kb.get_group_selection_keyboard(user_groups, "add_style")
    )
    await callback.answer()

@router.callback_query(F.data.startswith("group_add_style_"))
async def process_group_selection_for_add(callback: CallbackQuery, state: FSMContext):
    try:
        chat_id = int(callback.data.split("_")[-1])
        await state.update_data(chat_id=chat_id)
        await state.set_state(GroupStyleInput.waiting_for_style_name)
        await callback.message.edit_text(
            text="‚úÖ –ì—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞.\n\n<blockquote>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã:</blockquote>",
            reply_markup=kb.get_back_button("styles_group")
        )
        await callback.answer()
    except (ValueError, TypeError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã.", show_alert=True)

@router.message(StateFilter(GroupStyleInput.waiting_for_style_name), F.text)
async def process_group_style_name(message: Message, state: FSMContext):
    await state.update_data(style_name=message.text)
    await state.set_state(GroupStyleInput.waiting_for_style_prompt)
    await message.answer(
        "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
        "<blockquote>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è (—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç) –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: \"–û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –≤ —Å—Ç–∏–ª–µ –ø–∏—Ä–∞—Ç–∞\" –∏–ª–∏ \"–ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–∏–º\"</blockquote>"
    )

@router.message(StateFilter(GroupStyleInput.waiting_for_style_prompt), F.text)
async def process_group_style_prompt(message: Message, state: FSMContext):
    data = await state.get_data()
    chat_id = data.get("chat_id")
    style_name = data.get("style_name")
    style_prompt = message.text
    
    try:
        await db.add_group_style(chat_id, style_name, style_prompt, message.from_user.id)
        await state.clear()
        await message.answer(f"‚úÖ <b>–ì—Ä—É–ø–ø–æ–≤–æ–π —Å—Ç–∏–ª—å '{style_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>")
        await message.answer(text=Menus.group_styles_menu, reply_markup=kb.get_group_styles_menu())
    except Exception as e:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å—Ç–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=kb.get_group_styles_menu()
        )

@router.callback_query(F.data == "group_styles_select")
async def handle_select_group_style_start(callback: CallbackQuery, state: FSMContext):
    user_groups = await db.get_user_group_chats(callback.from_user.id)
    if not user_groups:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ —Å –±–æ—Ç–æ–º.", show_alert=True)
        return
    
    await state.set_state(GroupStyleSelection.waiting_for_chat_selection)
    await callback.message.edit_text(
        text=Menus.select_group_for_style_selection,
        reply_markup=kb.get_group_selection_keyboard(user_groups, "select_style")
    )
    await callback.answer()

@router.callback_query(F.data.startswith("group_select_style_"))
async def process_group_selection_for_select(callback: CallbackQuery, state: FSMContext):
    try:
        chat_id = int(callback.data.split("_")[-1])
        styles = await db.get_group_styles(chat_id)
        if not styles:
            await callback.answer("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –µ—â–µ –Ω–µ—Ç —Å—Ç–∏–ª–µ–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –æ–¥–∏–Ω.", show_alert=True)
            return
        
        await state.update_data(chat_id=chat_id)
        await state.set_state(GroupStyleSelection.waiting_for_style_selection)
        await callback.message.edit_text(
            text=Menus.select_group_style_menu, 
            reply_markup=kb.get_select_group_style_keyboard(styles, chat_id)
        )
        await callback.answer()
    except (ValueError, TypeError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã.", show_alert=True)

@router.callback_query(F.data.startswith("group_style_select_"))
async def process_group_style_selection(callback: CallbackQuery, state: FSMContext):
    try:
        parts = callback.data.split("_")
        style_id = int(parts[-1])
        chat_id_from_state = (await state.get_data()).get("chat_id")
        
        if not chat_id_from_state:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.", show_alert=True)
            return
        
        await db.set_active_group_style(chat_id_from_state, style_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç–∏–ª–µ–º
        styles = await db.get_group_styles(chat_id_from_state)
        await callback.message.edit_text(
            text=Menus.select_group_style_menu, 
            reply_markup=kb.get_select_group_style_keyboard(styles, chat_id_from_state)
        )
        await callback.answer("‚úÖ –ì—Ä—É–ø–ø–æ–≤–æ–π —Å—Ç–∏–ª—å –ø—Ä–∏–º–µ–Ω–µ–Ω!", show_alert=True)
    except (ValueError, TypeError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è.", show_alert=True)

@router.callback_query(F.data == "group_styles_list")
async def handle_list_group_styles(callback: CallbackQuery):
    user_groups = await db.get_user_group_chats(callback.from_user.id)
    if not user_groups:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ —Å –±–æ—Ç–æ–º.", show_alert=True)
        return
    
    styles_text = "üìã <b>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å—Ç–∏–ª–µ–π</b>\n\n"
    
    for chat_id, chat_title in user_groups:
        styles = await db.get_group_styles(chat_id)
        styles_text += f"<b>üè† {chat_title}</b>\n"
        
        if styles:
            for _, style_name, is_active in styles:
                status = " ‚úÖ (–∞–∫—Ç–∏–≤–µ–Ω)" if is_active else ""
                styles_text += f"  ‚Ä¢ <b>{style_name}</b>{status}\n"
        else:
            styles_text += "  <i>–°—Ç–∏–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</i>\n"
        styles_text += "\n"
        
    await callback.message.edit_text(text=styles_text, reply_markup=kb.get_back_button("styles_group"))
    await callback.answer()

# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –º–µ–Ω—é –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å—Ç–∏–ª–µ–π
@router.callback_query(F.data == "back_to_group_styles")
async def handle_back_to_group_styles(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(text=Menus.group_styles_menu, reply_markup=kb.get_group_styles_menu())
    await callback.answer()

# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –º–µ–Ω—é –ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
@router.callback_query(F.data == "back_to_personal_styles")
async def handle_back_to_personal_styles(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(text=Menus.personal_styles_menu, reply_markup=kb.get_personal_styles_menu())
    await callback.answer()

# –°—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@router.callback_query(F.data == "styles_add")
async def handle_add_style_start(callback: CallbackQuery, state: FSMContext):
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–∏—á–Ω—ã–µ —Å—Ç–∏–ª–∏
    await handle_add_personal_style_start(callback, state)

@router.callback_query(F.data == "styles_select")
async def handle_select_style(callback: CallbackQuery):
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–∏—á–Ω—ã–µ —Å—Ç–∏–ª–∏
    await handle_select_personal_style(callback)

@router.callback_query(F.data == "styles_list")
async def handle_list_styles(callback: CallbackQuery):
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–∏—á–Ω—ã–µ —Å—Ç–∏–ª–∏
    await handle_list_personal_styles(callback)